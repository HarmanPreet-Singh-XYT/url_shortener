// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens_query.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens(id, user_id, refresh_token, created_at,last_used_at)
VALUES(
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
`

type CreateTokenParams struct {
	UserID       uuid.UUID
	RefreshToken string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken, arg.UserID, arg.RefreshToken)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE user_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteToken, userID)
	return err
}

const deleteTokenById = `-- name: DeleteTokenById :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteTokenById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTokenById, id)
	return err
}

const retrieveToken = `-- name: RetrieveToken :one
SELECT id, user_id, refresh_token, created_at, updated_at, last_used_at FROM tokens
WHERE user_id = $1
`

func (q *Queries) RetrieveToken(ctx context.Context, userID uuid.UUID) (Token, error) {
	row := q.db.QueryRowContext(ctx, retrieveToken, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const retrieveTokenById = `-- name: RetrieveTokenById :one
SELECT id, user_id, refresh_token, created_at, updated_at, last_used_at FROM tokens
WHERE id = $1
`

func (q *Queries) RetrieveTokenById(ctx context.Context, id uuid.UUID) (Token, error) {
	row := q.db.QueryRowContext(ctx, retrieveTokenById, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const retrieveTokenByToken = `-- name: RetrieveTokenByToken :one
SELECT id, user_id, refresh_token, created_at, updated_at, last_used_at FROM tokens
WHERE refresh_token = $1
`

func (q *Queries) RetrieveTokenByToken(ctx context.Context, refreshToken string) (Token, error) {
	row := q.db.QueryRowContext(ctx, retrieveTokenByToken, refreshToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateTokenByUserId = `-- name: UpdateTokenByUserId :exec
UPDATE tokens
SET refresh_token = $2, updated_at = NOW(), last_used_at = NOW()
WHERE user_id = $1
`

type UpdateTokenByUserIdParams struct {
	UserID       uuid.UUID
	RefreshToken string
}

func (q *Queries) UpdateTokenByUserId(ctx context.Context, arg UpdateTokenByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTokenByUserId, arg.UserID, arg.RefreshToken)
	return err
}
