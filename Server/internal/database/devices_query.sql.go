// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: devices_query.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :exec
INSERT INTO devices(id,click_id,user_agent,device_type,language,platform,resolution,timezone,created_at)
VALUES(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    NOW()
)
`

type CreateDeviceParams struct {
	ClickID    uuid.UUID
	UserAgent  string
	DeviceType string
	Language   string
	Platform   string
	Resolution string
	Timezone   string
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) error {
	_, err := q.db.ExecContext(ctx, createDevice,
		arg.ClickID,
		arg.UserAgent,
		arg.DeviceType,
		arg.Language,
		arg.Platform,
		arg.Resolution,
		arg.Timezone,
	)
	return err
}

const retrieveDevicesByClickId = `-- name: RetrieveDevicesByClickId :many
SELECT id, click_id, user_agent, device_type, language, platform, resolution, timezone, created_at FROM devices
WHERE click_id = $1
`

func (q *Queries) RetrieveDevicesByClickId(ctx context.Context, clickID uuid.UUID) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, retrieveDevicesByClickId, clickID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.ClickID,
			&i.UserAgent,
			&i.DeviceType,
			&i.Language,
			&i.Platform,
			&i.Resolution,
			&i.Timezone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveDevicesById = `-- name: RetrieveDevicesById :one
SELECT id, click_id, user_agent, device_type, language, platform, resolution, timezone, created_at FROM devices
WHERE id = $1
`

func (q *Queries) RetrieveDevicesById(ctx context.Context, id uuid.UUID) (Device, error) {
	row := q.db.QueryRowContext(ctx, retrieveDevicesById, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.ClickID,
		&i.UserAgent,
		&i.DeviceType,
		&i.Language,
		&i.Platform,
		&i.Resolution,
		&i.Timezone,
		&i.CreatedAt,
	)
	return i, err
}
