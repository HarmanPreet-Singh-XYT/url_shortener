// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clicks_query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const analyticsRetrieval = `-- name: AnalyticsRetrieval :many
SELECT
  clicks.id, clicks.short_link_id, clicks.ip_address, clicks.country, clicks.referrer, clicks.is_unique, clicks.utm_source, clicks.utm_medium, clicks.utm_campaign, clicks.created_at, 
  devices.device_type, devices.platform, devices.language,
  devices.resolution, devices.timezone, devices.user_agent
FROM clicks
JOIN devices ON clicks.id = devices.click_id
WHERE clicks.short_link_id = $1
`

type AnalyticsRetrievalRow struct {
	ID          uuid.UUID
	ShortLinkID uuid.UUID
	IpAddress   string
	Country     string
	Referrer    string
	IsUnique    bool
	UtmSource   string
	UtmMedium   string
	UtmCampaign string
	CreatedAt   time.Time
	DeviceType  string
	Platform    string
	Language    string
	Resolution  string
	Timezone    string
	UserAgent   string
}

func (q *Queries) AnalyticsRetrieval(ctx context.Context, shortLinkID uuid.UUID) ([]AnalyticsRetrievalRow, error) {
	rows, err := q.db.QueryContext(ctx, analyticsRetrieval, shortLinkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnalyticsRetrievalRow
	for rows.Next() {
		var i AnalyticsRetrievalRow
		if err := rows.Scan(
			&i.ID,
			&i.ShortLinkID,
			&i.IpAddress,
			&i.Country,
			&i.Referrer,
			&i.IsUnique,
			&i.UtmSource,
			&i.UtmMedium,
			&i.UtmCampaign,
			&i.CreatedAt,
			&i.DeviceType,
			&i.Platform,
			&i.Language,
			&i.Resolution,
			&i.Timezone,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTotalClickByShortLinkId = `-- name: CountTotalClickByShortLinkId :one
SELECT COUNT(id) FROM clicks
WHERE short_link_id = $1
`

func (q *Queries) CountTotalClickByShortLinkId(ctx context.Context, shortLinkID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTotalClickByShortLinkId, shortLinkID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUniqueClickByShortLinkId = `-- name: CountUniqueClickByShortLinkId :one
SELECT COUNT(id) FROM clicks
WHERE short_link_id = $1 AND is_unique = TRUE
`

func (q *Queries) CountUniqueClickByShortLinkId(ctx context.Context, shortLinkID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUniqueClickByShortLinkId, shortLinkID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createClick = `-- name: CreateClick :one
INSERT INTO clicks(id,short_link_id,ip_address,country,referrer,is_unique,utm_source,utm_medium,utm_campaign,created_at)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    NOW()
)RETURNING id
`

type CreateClickParams struct {
	ShortLinkID uuid.UUID
	IpAddress   string
	Country     string
	Referrer    string
	IsUnique    bool
	UtmSource   string
	UtmMedium   string
	UtmCampaign string
}

func (q *Queries) CreateClick(ctx context.Context, arg CreateClickParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createClick,
		arg.ShortLinkID,
		arg.IpAddress,
		arg.Country,
		arg.Referrer,
		arg.IsUnique,
		arg.UtmSource,
		arg.UtmMedium,
		arg.UtmCampaign,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const retrieveClicksById = `-- name: RetrieveClicksById :one
SELECT id, short_link_id, ip_address, country, referrer, is_unique, utm_source, utm_medium, utm_campaign, created_at FROM clicks
WHERE id = $1
`

func (q *Queries) RetrieveClicksById(ctx context.Context, id uuid.UUID) (Click, error) {
	row := q.db.QueryRowContext(ctx, retrieveClicksById, id)
	var i Click
	err := row.Scan(
		&i.ID,
		&i.ShortLinkID,
		&i.IpAddress,
		&i.Country,
		&i.Referrer,
		&i.IsUnique,
		&i.UtmSource,
		&i.UtmMedium,
		&i.UtmCampaign,
		&i.CreatedAt,
	)
	return i, err
}

const retrieveClicksByShortLinkId = `-- name: RetrieveClicksByShortLinkId :many
SELECT id, short_link_id, ip_address, country, referrer, is_unique, utm_source, utm_medium, utm_campaign, created_at FROM clicks
WHERE short_link_id = $1
`

func (q *Queries) RetrieveClicksByShortLinkId(ctx context.Context, shortLinkID uuid.UUID) ([]Click, error) {
	rows, err := q.db.QueryContext(ctx, retrieveClicksByShortLinkId, shortLinkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Click
	for rows.Next() {
		var i Click
		if err := rows.Scan(
			&i.ID,
			&i.ShortLinkID,
			&i.IpAddress,
			&i.Country,
			&i.Referrer,
			&i.IsUnique,
			&i.UtmSource,
			&i.UtmMedium,
			&i.UtmCampaign,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
