// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: short_link_query.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createShortLink = `-- name: CreateShortLink :exec
INSERT INTO short_links(id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign,is_active,created_at)
VALUES(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    TRUE,
    NOW()
) RETURNING id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign, is_active, created_at, updated_at
`

type CreateShortLinkParams struct {
	UserID      uuid.UUID
	Slug        string
	OriginalUrl string
	UtmSource   string
	UtmMedium   string
	UtmCampaign string
}

func (q *Queries) CreateShortLink(ctx context.Context, arg CreateShortLinkParams) error {
	_, err := q.db.ExecContext(ctx, createShortLink,
		arg.UserID,
		arg.Slug,
		arg.OriginalUrl,
		arg.UtmSource,
		arg.UtmMedium,
		arg.UtmCampaign,
	)
	return err
}

const deleteShortLinkBySlugNUserId = `-- name: DeleteShortLinkBySlugNUserId :exec
DELETE FROM short_links
WHERE slug = $1 AND user_id = $2
`

type DeleteShortLinkBySlugNUserIdParams struct {
	Slug   string
	UserID uuid.UUID
}

func (q *Queries) DeleteShortLinkBySlugNUserId(ctx context.Context, arg DeleteShortLinkBySlugNUserIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteShortLinkBySlugNUserId, arg.Slug, arg.UserID)
	return err
}

const retrieveShortLinkById = `-- name: RetrieveShortLinkById :one
SELECT id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign, is_active, created_at, updated_at FROM short_links
WHERE id = $1
`

func (q *Queries) RetrieveShortLinkById(ctx context.Context, id uuid.UUID) (ShortLink, error) {
	row := q.db.QueryRowContext(ctx, retrieveShortLinkById, id)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.OriginalUrl,
		&i.UtmSource,
		&i.UtmMedium,
		&i.UtmCampaign,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const retrieveShortLinkBySlug = `-- name: RetrieveShortLinkBySlug :one
SELECT id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign, is_active, created_at, updated_at FROM short_links
WHERE slug = $1
`

func (q *Queries) RetrieveShortLinkBySlug(ctx context.Context, slug string) (ShortLink, error) {
	row := q.db.QueryRowContext(ctx, retrieveShortLinkBySlug, slug)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.OriginalUrl,
		&i.UtmSource,
		&i.UtmMedium,
		&i.UtmCampaign,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const retrieveShortLinkBySlugNUserId = `-- name: RetrieveShortLinkBySlugNUserId :one
SELECT id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign, is_active, created_at, updated_at FROM short_links
WHERE slug = $1 AND user_id = $2
`

type RetrieveShortLinkBySlugNUserIdParams struct {
	Slug   string
	UserID uuid.UUID
}

func (q *Queries) RetrieveShortLinkBySlugNUserId(ctx context.Context, arg RetrieveShortLinkBySlugNUserIdParams) (ShortLink, error) {
	row := q.db.QueryRowContext(ctx, retrieveShortLinkBySlugNUserId, arg.Slug, arg.UserID)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.OriginalUrl,
		&i.UtmSource,
		&i.UtmMedium,
		&i.UtmCampaign,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const retrieveShortLinkByUserId = `-- name: RetrieveShortLinkByUserId :many
SELECT id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign, is_active, created_at, updated_at FROM short_links
WHERE user_id = $1
`

func (q *Queries) RetrieveShortLinkByUserId(ctx context.Context, userID uuid.UUID) ([]ShortLink, error) {
	rows, err := q.db.QueryContext(ctx, retrieveShortLinkByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShortLink
	for rows.Next() {
		var i ShortLink
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Slug,
			&i.OriginalUrl,
			&i.UtmSource,
			&i.UtmMedium,
			&i.UtmCampaign,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveShortLinkByUserIdANDId = `-- name: RetrieveShortLinkByUserIdANDId :one
SELECT id, user_id, slug, original_url, utm_source, utm_medium, utm_campaign, is_active, created_at, updated_at FROM short_links
WHERE user_id = $1 AND id = $2
`

type RetrieveShortLinkByUserIdANDIdParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) RetrieveShortLinkByUserIdANDId(ctx context.Context, arg RetrieveShortLinkByUserIdANDIdParams) (ShortLink, error) {
	row := q.db.QueryRowContext(ctx, retrieveShortLinkByUserIdANDId, arg.UserID, arg.ID)
	var i ShortLink
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.OriginalUrl,
		&i.UtmSource,
		&i.UtmMedium,
		&i.UtmCampaign,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const toggleShortLink = `-- name: ToggleShortLink :exec
UPDATE short_links
SET
  is_active = NOT is_active, -- Toggles the boolean value
  updated_at = NOW()         -- Updates the timestamp to the current time
WHERE
  slug = $1 AND user_id = $2
`

type ToggleShortLinkParams struct {
	Slug   string
	UserID uuid.UUID
}

func (q *Queries) ToggleShortLink(ctx context.Context, arg ToggleShortLinkParams) error {
	_, err := q.db.ExecContext(ctx, toggleShortLink, arg.Slug, arg.UserID)
	return err
}

const updateShortLinkSlug = `-- name: UpdateShortLinkSlug :exec
UPDATE short_links
SET slug = $3,updated_at = NOW()
WHERE slug = $1 AND user_id = $2
`

type UpdateShortLinkSlugParams struct {
	Slug   string
	UserID uuid.UUID
	Slug_2 string
}

func (q *Queries) UpdateShortLinkSlug(ctx context.Context, arg UpdateShortLinkSlugParams) error {
	_, err := q.db.ExecContext(ctx, updateShortLinkSlug, arg.Slug, arg.UserID, arg.Slug_2)
	return err
}

const updateShortLinkUTM = `-- name: UpdateShortLinkUTM :exec
UPDATE short_links
SET utm_source = $2, utm_medium = $3, utm_campaign = $4,updated_at = NOW()
WHERE slug = $1 AND user_id = $5
`

type UpdateShortLinkUTMParams struct {
	Slug        string
	UtmSource   string
	UtmMedium   string
	UtmCampaign string
	UserID      uuid.UUID
}

func (q *Queries) UpdateShortLinkUTM(ctx context.Context, arg UpdateShortLinkUTMParams) error {
	_, err := q.db.ExecContext(ctx, updateShortLinkUTM,
		arg.Slug,
		arg.UtmSource,
		arg.UtmMedium,
		arg.UtmCampaign,
		arg.UserID,
	)
	return err
}
